ext {
    appName = project.findProperty("APPLICATION_NAME") ?: "RE0"
    buildTime = project.findProperty("BUILD_TIME") ?: "BUILD_TIME"
    commitId = project.findProperty("COMMIT_ID") ?: "COMMIT_ID"
    gameConfig = project.findProperty("GAME_CONFIG") ?: "GAME_CONFIG"
    applicationId = project.findProperty("APPLICATION_ID")
    appVersionNum = project.findProperty("VERSION_NAME") ?: "2.6.0"
    appVersionCode = Integer.parseInt(project.findProperty("VERSION_CODE") ?: "1")
    debug = (System.getenv("isdebug") ?: "false").toUpperCase().equals(true)
    obbuuid = getObbId()
}

def getObbId() {
    def uuid = "b185a95d-5f34-481c-b1f6-f0be4da851a4"
    def obb = rootProject.file("demo.main.obb")

    if (obb.exists())
        uuid = rootProject.zipTree("demo.main.obb").findAll { it.name.split('-').length == 5 && it.name.length() == 36 }.collect { return it.name }[0]

    println obb.absolutePath + '@@' + uuid
    return uuid
}

task afterbuild() {
    doLast {
        println appName
        println buildTime
        println commitId
        println gameConfig
        println applicationId
        println appVersionNum
        println appVersionCode
        println debug

        println "---------------------------"

        println bugly.appId
        println bugly.appKey
        println bugly.debug
        println bugly.appPackage
        println bugly.appVersion
        println bugly.appChannel
        println bugly.outputDir

        //buglySymbolAndroid()
        CopyObb()

        def isAfterBuild = (System.getenv("afterbuild") ?: "true").toLowerCase()
        println "isAfterBuild:" + isAfterBuild
        if (isAfterBuild.equals("false"))
            return

        //NHPProtect()

        Mtp()
    }
}

def CopyObb() {
    fileTree(project.getProjectDir()) {
        include("*.main.obb")
    }.each { obb ->
        def infile = file(obb)
        def outfile = file("build/outputs/apk/" + obb.name)
        println infile
        println outfile
        outfile.setBytes(infile.readBytes())
    }
}

def NHPProtect() {
    def dir = file("/Users/NHPProtect/")
    dir = dir.exists() ? dir : file(project.getProjectDir().path + "/../Apk-Protect-4.3/")
    println dir

    fileTree("build/outputs/apk") {
        include("*.apk")
        exclude("*_encrypted.apk")
    }.each { file ->
        //def cmdstr =  "java -jar NHPProtect.jar -yunconfig -antirepack -zipalign -input " + file
        def cmdstr = "java -jar NHPProtect.jar -yunconfig -apksign -zipalign -input " + file
        println cmdstr
        def result = cmdstr.execute([], dir).text.trim()
        println result
        if (result.contains("Success! The new apk path is")) {
            println("NHPProtect sucess !")
        } else {
            throw ("NHPProtect failed : check error in logs ! \n" + result)
        }
    }
}

def buglySymbolAndroid() {
    def dir = file("/Users/buglySymbolAndroid/")
    dir = dir.exists() ? dir : file(project.getProjectDir().path + "/../buglySymbolAndroid/")
    println dir

    def jniLibspath = file(project.getProjectDir().path + "/src/main/jniLibs/").absolutePath

    //def cmdstr = "java -jar buglySymbolAndroid.jar -i ${jniLibspath} -u -id ${bugly.appId} -key ${bugly.appKey} -package ${applicationId} -version ${appVersionNum}(${appVersionCode})"
    def cmdstr = "java -jar buglySymbolAndroid.jar -i ${jniLibspath} -u -id ${bugly.appId} -key ${bugly.appKey} -package ${applicationId} -version ${appVersionNum}"
    println cmdstr
    def result = cmdstr.execute([], dir).text.trim()
    println result
}

def Mtp() {
    def dir = file("/Users/MTP/")
    dir = dir.exists() ? dir : file(project.getProjectDir().path + "/../MTP/")
    println dir

    fileTree("build/outputs/apk") {
        include("*.apk")
        exclude("/20115/")
    }.each { apk ->

        def oldPath = apk.absolutePath
        def newPath = apk.parentFile.absolutePath
        def certPath = dir.absolutePath + "/20115.cert"
        def configPath = dir.absolutePath + '/config/' + apk.name.split('-')[0] + '-config.xml'

        def cmdstr = dir.absolutePath + '/MTPClientConsole -d 20115 ' + oldPath + ' ' + newPath + ' ' + certPath + ' -c ' + configPath
        println cmdstr
        def result = cmdstr.execute([], dir).text.trim()
        println result
        /*if (result.contains("Success! The new apk path is")) {
            println("mtp sucess !")
        } else {
            throw ("mtp failed : check error in logs ! \n" + result)
        }*/
    }
}

preBuild.doFirst {
    def arr = ['src/main/assets/Config.json', 'src/main/assets/SdkConfig.json']
    arr.each {
        def del = file(it)
        println del.absolutePath
        if (del.exists()) {
            println "del:" + del.absolutePath
            del.delete()
        }
    }
}