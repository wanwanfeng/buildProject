// Top-level build file where you can add configuration options common to all sub-projects/modules.
buildscript {
    repositories {
        google()
        //jcenter()
        maven { url 'http://maven.aliyun.com/nexus/content/groups/public/' }
        maven { url 'http://maven.aliyun.com/nexus/content/repositories/jcenter' }
    }
    dependencies {
        classpath 'com.android.tools.build:gradle:3.2.0'
        classpath 'com.tencent.bugly:symtabfileuploader:latest.release'
        classpath 'com.google.gms:google-services:4.0.1'
    }
}

allprojects {
    repositories {
        google()
        //jcenter()
        maven { url 'http://maven.aliyun.com/nexus/content/groups/public/' }
        maven { url 'http://maven.aliyun.com/nexus/content/repositories/jcenter' }
        flatDir {
            dirs 'libs', 'libs/google', 'libs/bugly', 'libs/bili', 'libs/shareJoy', 'libs/uo','libs/komoe'
        }
    }
}

apply from: file("buildAPK.gradle")
//apply from: file("buildBundle.gradle")

dependencies {
    implementation project(':MainLibProj')
    implementation project(':unity-android-resources')

    implementation fileTree(include: ['*.jar', '*.aar'], dir: 'libs', excludes: ['okhttp-3.4.2.jar', 'okio-1.9.0.jar', 'unity-classes.jar'])
    implementation fileTree(include: ['*.jar', '*.aar'], dir: 'libs/google')
    implementation fileTree(include: ['*.jar', '*.aar'], dir: 'libs/bugly')

    implementation(name: 'unity-classes', ext: 'jar')
    implementation 'com.android.support:multidex:1.0.3'

    biliImplementation fileTree(include: ['*.jar', '*.aar'], dir: 'libs/bili')
    shareJoyImplementation fileTree(include: ['*.jar', '*.aar'], dir: 'libs/shareJoy')
    uoImplementation fileTree(include: ['*.jar', '*.aar'], dir: 'libs/uo')
    komoeImplementation fileTree(include: ['*.jar', '*.aar'], dir: 'libs/komoe')
}

def getConfig(flag = "Release") {
    def temp = System.getenv("server");
    if (temp == "") temp = null;

    def servers = (temp ?: flag).split(',')
    println "---------select servers---------- : " + servers

    def jsonFile = file(project.getProjectDir().path + "/../../../Config.json").getText()
    def json = new groovy.json.JsonSlurper().parseText(jsonFile)
    json = json.findAll { it.Flag in servers }

    //追加信息
    json.forEach {
        it.RandomCode = System.getenv("productName".toLowerCase())
        it.BuildTime = System.getenv("time".toLowerCase())
        it.ProductName = System.getenv("productName".toLowerCase())
        it.ApplicationId = System.getenv("applicationId".toLowerCase())
        it.VersionCode = System.getenv("versionCode".toLowerCase())
        it.VersionName = System.getenv("versionName".toLowerCase())
        it.GrayPackage = System.getenv("grayPackage".toLowerCase())
    }

    def res = groovy.json.JsonOutput.toJson(json)
    res = java.util.Base64.getEncoder().encodeToString(res.getBytes())

    println flag
    println res

    def content = "package com.unity3d.player;\npublic final class Config {\n\tpublic static final String  gameConfig = \"${res}\";\n}"
    def javaFile = file("src/main/java/com/unity3d/player/Config.java")
    if (file(javaFile.parent).exists().equals(false)) file(javaFile.parent).mkdirs()
    javaFile.write(content)

    return res
}

def getSdkConfig(res = "0") {
    def content = "package com.unity3d.player;\npublic final class SdkConfig {\n\tpublic static final String  gameConfig = \"${res}\";\n}"
    def javaFile = file("src/main/java/com/unity3d/player/SdkConfig.java")
    if (file(javaFile.parent).exists().equals(false)) file(javaFile.parent).mkdirs()
    javaFile.write(content)

    println res

    return res
}

def preNoBuild() {
    getConfig("Release")
    getSdkConfig("0")
    println("=================preNoBuild doFirst=================")
}

def preBiliBuild() {
    getConfig("Release")
    getSdkConfig("1")
    println("=================preBiliBuild doFirst=================")
}

def preShareJoyBuild() {
    getConfig("Release")
    getSdkConfig("2")
    println("=================preShareJoyBuild doFirst=================")
}

def preUoBuild() {
    getConfig("Release-UO")
    getSdkConfig("3")
    println("=================preUoBuild doFirst=================")
}

def preKomoeBuild() {
    getConfig("Release")
    getSdkConfig("100")
    println("=================preNoBuild doFirst=================")
}

afterEvaluate {
    preNoDebugBuild.doFirst { preNoBuild() }
    preNoReleaseBuild.doFirst { preNoBuild() }
    preBiliDebugBuild.doFirst { preBiliBuild() }
    preBiliReleaseBuild.doFirst { preBiliBuild() }
    preShareJoyDebugBuild.doFirst { preShareJoyBuild() }
    preShareJoyReleaseBuild.doFirst { preShareJoyBuild() }
    preUoDebugBuild.doFirst { preUoBuild() }
    preUoReleaseBuild.doFirst { preUoBuild() }
    preKomoeDebugBuild.doFirst { preKomoeBuild() }
    preKomoeReleaseBuild.doFirst { preKomoeBuild() }
}